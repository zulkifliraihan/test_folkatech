generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String           @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  profiles       Profile?
  userHasRoles   UserHasRole[]
  reviews  Review[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  userHasRoles UserHasRole[]
}

model UserHasRole {
  id      Int  @id @default(autoincrement())
  user_id Int
  role_id Int
  user    User @relation(fields: [user_id], references: [id])
  role    Role @relation(fields: [role_id], references: [id])

  @@unique([user_id, role_id])
}

model Profile {
  id        Int       @id @default(autoincrement())
  user_id   Int       @unique
  firstName String    @db.VarChar(255)
  lastName  String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  user      User      @relation(fields: [user_id], references: [id])
}

model Store {
  id             Int              @id @default(autoincrement())
  uuid           String           @unique @default(uuid())
  name           String           @db.VarChar(255)
  description    String           @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  products  Product[]
}

model Product {
  id                  Int              @id @default(autoincrement())
  store_id            Int
  uuid                String           @unique @default(uuid())
  name                String           @db.VarChar(255)
  miniDescription     String           @db.Text
  description         String           @db.Text
  price               Float            @db.Double
  stock               Int            
  createdAt           DateTime         @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  store               Store            @relation(fields: [store_id], references: [id])
  reviews             Review[]
  media               Media[]  
}

model Review {
  id            Int    @id @default(autoincrement())
  product_id    Int
  user_id       Int
  rating        Int
  comment       String
  product   Product @relation(fields: [product_id], references: [id])
  user      User    @relation(fields: [user_id], references: [id])
}

model Media {
  id           Int     @id @default(autoincrement())
  model_id     Int
  model_type   String
  filename     String
  mime_type    String
  size         Int
  url          String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  model        Product @relation(fields: [model_id], references: [id])
}