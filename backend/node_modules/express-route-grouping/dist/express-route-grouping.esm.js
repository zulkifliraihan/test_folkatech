import { Router } from 'express';
import pluralize from 'pluralize';

var RESOURCES = {
  index: {
    method: 'get',
    suffix: false
  },
  find: {
    method: 'get',
    suffix: true
  },
  create: {
    method: 'post',
    suffix: false
  },
  update: {
    method: 'put',
    suffix: true
  },
  patch: {
    method: 'patch',
    suffix: true
  },
  "delete": {
    method: 'delete',
    suffix: true
  }
};

var RouteGroup = /*#__PURE__*/function () {
  function RouteGroup(path, router) {
    var _this = this;

    if (path === void 0) {
      path = '/';
    }

    if (router === void 0) {
      router = Router();
    }

    this.group = function (path, fn) {
      if (path === void 0) {
        path = '';
      }

      var newGroup = new RouteGroup(_this.head + _this.sanitize(path), _this.router);
      _this.proxyRouter = _this.createProxy(_this.router, newGroup);
      fn(_this.proxyRouter);
    };

    this.resource = function (options) {
      if (!options) {
        throw new Error('Resource handlers are required!');
      }

      var _options$handlers = options.handlers,
          handlers = _options$handlers === void 0 ? {} : _options$handlers,
          _options$beforeHandle = options.beforeHandlers,
          beforeHandlers = _options$beforeHandle === void 0 ? [] : _options$beforeHandle,
          _options$afterHandler = options.afterHandlers,
          afterHandlers = _options$afterHandler === void 0 ? [] : _options$afterHandler;
      Object.keys(RESOURCES).forEach(function (name) {
        var _RESOURCES$name = RESOURCES[name],
            method = _RESOURCES$name.method,
            suffix = _RESOURCES$name.suffix;
        var requestRouter = _this.router[method];

        var fullPath = _this.to(suffix ? _this.getPlaceholder() : '/');

        var handler = handlers[name];

        if (handler) {
          requestRouter.bind(_this.router).apply(void 0, [fullPath].concat(beforeHandlers, Array.isArray(handler) ? handler : [handler], afterHandlers));
        }
      });
    };

    this["export"] = function () {
      return _this.router;
    };

    this.to = function (suffix) {
      if (suffix === void 0) {
        suffix = '/';
      }

      return _this.head + _this.sanitize(suffix);
    };

    this.head = path;
    this.router = router;
  }

  var _proto = RouteGroup.prototype;

  _proto.sanitize = function sanitize(path) {
    if (path === '/') return ''; // remove slashes at start and end positions, if exists
    // to sure there is no any slashes.

    var newPath = path.replace(/^(\/+)(.)/, '$2').replace(/(.)(\/+)$/, '$1'); // add delimiter on the end

    if (this.head !== '/') {
      newPath = newPath.padStart(newPath.length + 1, '/');
    }

    return newPath;
  };

  _proto.toCamelCase = function toCamelCase(str) {
    if (str === '') {
      return str;
    }

    var word = str.replace(/[^A-Za-z0-9]/g, ' ') // transfrom non-alphanumeric chars to space
    .replace(/\s+/g, ' ') // trim multiple space
    .split(/[-_\s]/).map(function (f) {
      return f[0].toLocaleUpperCase() + f.substr(1);
    }).join('');
    return word[0].toLocaleLowerCase() + word.substr(1);
  };

  _proto.callRouter = function callRouter(value) {
    var _this2 = this;

    return typeof value === 'function' ? function (path) {
      for (var _len = arguments.length, handlers = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        handlers[_key - 1] = arguments[_key];
      }

      value.call.apply(value, [_this2.router, _this2.to(path)].concat(handlers));
    } : this.router[value];
  };

  _proto.getPlaceholder = function getPlaceholder() {
    var namespace = this.head.split('/').pop() || '';
    var prefix = pluralize.singular(this.toCamelCase(namespace));
    return ":" + (prefix ? prefix + "Id" : 'id');
  };

  _proto.createProxy = function createProxy(router, newGroup) {
    var self = newGroup;
    var callRouter = this.callRouter.bind(newGroup);
    var handler = {
      get: function get(_, prop) {
        return self[prop] ? Reflect.get(self, prop) : callRouter(router[prop]);
      }
    };
    return new Proxy(this, handler);
  };

  return RouteGroup;
}();

export default RouteGroup;
//# sourceMappingURL=express-route-grouping.esm.js.map
